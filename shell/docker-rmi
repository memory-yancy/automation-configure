#!/usr/bin/env bash

usage()
{
    cat >&2 <<-EOF

Usage:
    $0 [-n line_number]

Option:
    -n line_number:     delete how many images in the first part of "docker images", data-type is digit.
                        default action will delete all untagged images.

Example:
    $0

EOF
    exit
}

log_info()
{
    echo
    echo -e "\e[1;32mINFO: $* \e[0m" >&2
}

log_error()
{
    echo
    echo -e "\e[1;31mERROR: $* \e[0m" >&2
}

check_command()
{
    local cmd="$1"

    command -v "$cmd" > /dev/null || {
        log_error "please install $cmd package mannually."
        return 1
    }
}

check_docker()
{
    check_command "docker" || return

    if ! docker info &> /dev/null; then
        log_error "got permission denied while using docker, please check it."
        return 1
    fi
}

check_is_digit()
{
    [[ "$LINE_NUMBER" =~ [[:digit:]]{1,3} ]] || {
        log_error "$LINE_NUMBER isn't a valid digit."
        return 1
    }
}

delete_image_none()
{
    if ! docker rmi -f $(docker images --filter "dangling=true" -q) 2> /dev/null; then
        log_error "no appropriate docker images to delete."
    fi
}

delete_image()
{
    log_info "deleting the first [ $LINE_NUMBER ] Docker image."

    docker images --format "{{.ID}}" | head -n "$LINE_NUMBER" | xargs -n1 -P $(nproc) docker rmi -f
}

while getopts "n:h" option; do
    case "$option" in
        n)  LINE_NUMBER="$OPTARG";  ;;
        h | ?)  usage;  ;;
    esac
done

if [[ "$LINE_NUMBER" ]]; then
    check_is_digit || exit
fi
check_docker || exit

if [[ "$LINE_NUMBER" ]]; then
    delete_image
else
    [[ "$1" ]] || delete_image_none
fi
